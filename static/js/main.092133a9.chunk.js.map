{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","state","dimensionsX","dimensionsY","roomCounter","maxPaths","roomSizeX","roomSizeY","onClick","bind","onChange","num","array","i","push","j","e","this","setState","target","name","validator","value","x","input","Number","isNaN","min","max","Math","ceil","floor","random","currentX","currentY","y","randomDirection","directions","length","map","createArray","getRandomInt","getValidRandomDirection","forceUpdate","grid","createMap","className","type","maxLength","obj","row","key","obj2","col","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uSA6JeA,G,kBAzJb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,YAAa,GACbC,YAAa,GACbC,YAAa,EACbC,SAAU,EACVC,UAAW,EACXC,UAAW,GAEb,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAXC,E,yEAcPE,EAAKT,EAAaC,GAE5B,IADA,IAAIS,EAAQ,GACHC,EAAI,EAAGA,EAAIX,EAAaW,IAAK,CACpCD,EAAME,KAAK,IACX,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,EAAaY,IAC/BH,EAAMC,GAAGC,KAAKH,GAGlB,OAAOC,I,+BAGAI,GACPC,KAAKC,SAAL,eACGF,EAAEG,OAAOC,KAAOH,KAAKI,UAAUL,EAAEG,OAAOG,W,gCAInCC,GACR,IAAIC,EAAQC,OAAOF,GACnB,OAAIG,MAAMF,GACD,EAEFA,I,mCAGIG,EAAKC,GAGhB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,I,8CAG/BM,EAAUC,EAAUX,EAAGY,GAC7C,IACIC,EADAC,EAAa,CAAC,EAAE,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,CAAC,EAAG,IAEhD,GACED,EAAkBC,EAAWR,KAAKE,MAAMF,KAAKG,SAAWK,EAAWC,eAC1DrB,KAAKhB,MAAMC,YAAc+B,EAAWI,EAAW,GAAKd,GAAK,GAChEN,KAAKhB,MAAME,YAAc+B,EAAWG,EAAW,GAAKF,GAAK,GAG7D,OAAOC,I,kCAoBP,IAfA,IAYEA,EAZElC,EAAce,KAAKhB,MAAMC,YAC3BC,EAAcc,KAAKhB,MAAME,YACzBC,EAAca,KAAKhB,MAAMG,YACzBE,EAAYW,KAAKhB,MAAMK,UACvBC,EAAYU,KAAKhB,MAAMM,UAEvBgC,EAAMtB,KAAKuB,YAAY,EAAGtC,EAAaC,GACvC8B,EAAWhB,KAAKwB,aAAa,EAAE,GAAK,EAAIvC,EAAc,EACtDgC,EAAWjB,KAAKwB,aAAa,EAAE,GAAK,EAAItC,EAAc,EAOjDC,GAAa,CAClBgC,EAAkBnB,KAAKyB,0BAEvB,IAAI,IAAI7B,EAAI,EAAGA,EAAIP,EAAWO,IAC5B,IAAI,IAAIE,EAAI,EAAGA,EAAIR,EAAWQ,IAC5BwB,EAAIN,EAAWpB,EAAIuB,EAAgB,IAAIF,EAAWnB,EAAIqB,EAAgB,IAAM,EAahFhC,IAEF,OAAOmC,I,8BAGDvB,GACNC,KAAK0B,gB,+BASL,IAAIC,EAAO3B,KAAK4B,YAChB,OACE,6BACE,yBAAKC,UAAU,8BACb,yBAAKA,UAAU,UACb,6CACA,2BAAOA,UAAU,eAAe1B,KAAK,cAAc2B,KAAK,OAAOC,UAAU,IAAI1B,MAAOL,KAAKhB,MAAMC,YAAaQ,SAAUO,KAAKP,YAE7H,yBAAKoC,UAAU,UACb,6CACA,2BAAOA,UAAU,eAAe1B,KAAK,cAAc2B,KAAK,OAAOC,UAAU,IAAI1B,MAAOL,KAAKhB,MAAME,YAAaO,SAAUO,KAAKP,YAE7H,yBAAKoC,UAAU,UACb,6CACA,2BAAOA,UAAU,eAAe1B,KAAK,cAAc2B,KAAK,OAAOC,UAAU,IAAI1B,MAAOL,KAAKhB,MAAMG,YAAaM,SAAUO,KAAKP,YAE7H,yBAAKoC,UAAU,UACb,6CACA,2BAAOA,UAAU,eAAe1B,KAAK,WAAW2B,KAAK,OAAOC,UAAU,IAAI1B,MAAOL,KAAKhB,MAAMI,SAAUK,SAAUO,KAAKP,YAEvH,yBAAKoC,UAAU,UACb,6CACA,2BAAOA,UAAU,eAAe1B,KAAK,YAAY2B,KAAK,OAAOC,UAAU,IAAI1B,MAAOL,KAAKhB,MAAMK,UAAWI,SAAUO,KAAKP,YAEzH,yBAAKoC,UAAU,UACb,6CACA,2BAAOA,UAAU,eAAe1B,KAAK,YAAY2B,KAAK,OAAOC,UAAU,IAAI1B,MAAOL,KAAKhB,MAAMM,UAAWG,SAAUO,KAAKP,aAI3H,2BAAOoC,UAAU,OAAOtC,QAASS,KAAKT,SACpC,+BACGoC,EAAKL,KAAI,SAACU,EAAKC,GAAN,OAAc,wBAAIC,IAAKD,GAAMD,EAAIV,KAAI,SAACa,EAAMC,GAAP,OAAc,wBAAKP,UACrD,IAATM,EACI,OACA,SAEND,IACEE,GANyD,mB,GA5IvDC,cCOZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpE,QACf8D,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,oBAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,oBAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,OC7BxBiC,K","file":"static/js/main.092133a9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensionsX: 30,\n      dimensionsY: 30,\n      roomCounter: 1,\n      maxPaths: 2,\n      roomSizeX: 5,\n      roomSizeY: 5\n    };\n    this.onClick = this.onClick.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  createArray(num, dimensionsX, dimensionsY) {\n    var array = [];\n    for (var i = 0; i < dimensionsX; i++) {\n      array.push([]);\n      for (var j = 0; j < dimensionsY; j++) {\n        array[i].push(num);\n      }\n    }\n    return array;\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: this.validator(e.target.value)\n    });\n  }\n\n  validator(x) {\n    let input = Number(x);\n    if (isNaN(input)){\n      return 0;\n    }\n    return input;\n  }\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getValidRandomDirection(currentX, currentY, x, y){\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]; // get a random direction from (left,right,up,down)\n    let randomDirection;\n    do {\n      randomDirection = directions[Math.floor(Math.random() * directions.length)];\n    } while ( (this.state.dimensionsX > currentX + directions[0] * x >= 0 )\n    && (this.state.dimensionsY > currentY + directions[1] * y >= 0))\n\n    \n    return randomDirection;\n  }\n\n  //lets create a randomly generated map for our dungeon crawler\n  createMap() {\n    let dimensionsX = this.state.dimensionsX, // width of the map\n      dimensionsY = this.state.dimensionsY, // height of the map\n      roomCounter = this.state.roomCounter,\n      roomSizeX = this.state.roomSizeX,\n      roomSizeY = this.state.roomSizeY,\n\n      map = this.createArray(1, dimensionsX, dimensionsY), // create a 2d array full of 1's\n      currentX = this.getRandomInt(0,1) ? 0 : dimensionsX - 1, // start at a random edge\n      currentY = this.getRandomInt(0,1) ? 0 : dimensionsY - 1, // start at a random edge\n      \n      \n      lastDirection = [], // the last direction\n      randomDirection; // next direction - holds a value from directions\n\n    // room creation\n    while (roomCounter) {\n      randomDirection = this.getValidRandomDirection();\n\n      for(let i = 0; i < roomSizeX; i++){\n        for(let j = 0; j < roomSizeY; j++){\n          map[currentX + i * randomDirection[0]][currentY + j * randomDirection[1]] = 0;\n        }\n      }\n \n\n      //create paths\n      /*let paths = this.state.maxPaths;\n      while(paths){\n        \n        paths--;\n      }*/\n   \n      \n      roomCounter--;\n    }\n    return map; // all our tunnels have been created and our map is complete, so lets return it to our render()\n  };\n\n  onClick(e) {\n    this.forceUpdate()\n  }\n  /*dimensionsX: 30,\n  dimensionsY: 30,\n  roomCounter: 5,\n  maxPaths: 2,\n  roomSizeX: 5,\n  roomSizeY: 5*/\n  render() {\n    let grid = this.createMap();\n    return (\n      <div >\n        <div className=\"form-group row text-center\">\n          <div className=\"inline\">\n            <label>dimensions</label>\n            <input className=\"form-control\" name=\"dimensionsX\" type=\"text\" maxLength=\"2\" value={this.state.dimensionsX} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>dimensions</label>\n            <input className=\"form-control\" name=\"dimensionsY\" type=\"text\" maxLength=\"2\" value={this.state.dimensionsY} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>dimensions</label>\n            <input className=\"form-control\" name=\"roomCounter\" type=\"text\" maxLength=\"2\" value={this.state.roomCounter} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>dimensions</label>\n            <input className=\"form-control\" name=\"maxPaths\" type=\"text\" maxLength=\"2\" value={this.state.maxPaths} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>dimensions</label>\n            <input className=\"form-control\" name=\"roomSizeX\" type=\"text\" maxLength=\"2\" value={this.state.roomSizeX} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>dimensions</label>\n            <input className=\"form-control\" name=\"roomSizeY\" type=\"text\" maxLength=\"2\" value={this.state.roomSizeY} onChange={this.onChange}/>\n          </div>\n\n        </div>\n        <table className=\"grid\" onClick={this.onClick}>\n          <thead>\n            {grid.map((obj, row) => <tr key={row}>{obj.map((obj2, col) =>< td className = {\n                obj2 === 1\n                  ? 'wall'\n                  : 'tunnel'\n              }\n              key = {\n                col\n              } > </td>)}</tr>)}\n          </thead>\n        </table>\n      </div>\n    );\n  }\n}\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}