{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","state","dimensions","maxTunnels","maxLength","onClick","bind","onChange","num","array","i","push","j","e","this","setState","target","name","validator","value","x","input","Number","isNaN","randomDirection","map","createArray","currentRow","Math","floor","random","currentColumn","directions","lastDirection","length","randomLength","ceil","tunnelLength","forceUpdate","grid","createMap","className","type","obj","row","key","obj2","col","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.91727b37.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: 30,\n      maxTunnels: 100,\n      maxLength: 8\n    };\n    this.onClick = this.onClick.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  createArray(num, dimensions) {\n    var array = [];\n    for (var i = 0; i < dimensions; i++) {\n      array.push([]);\n      for (var j = 0; j < dimensions; j++) {\n        array[i].push(num);\n      }\n    }\n    return array;\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: this.validator(e.target.value)\n    });\n  }\n\n  validator(x) {\n    let input = Number(x);\n    if (isNaN(input)){\n      return 0;\n    }\n    return input;\n  }\n\n  //lets create a randomly generated map for our dungeon crawler\n  createMap() {\n    let dimensions = this.state.dimensions, // width and height of the map\n      maxTunnels = this.state.maxTunnels, // max number of tunnels possible\n      maxLength = this.state.maxLength, // max length each tunnel can have\n      map = this.createArray(1, dimensions), // create a 2d array full of 1's\n      currentRow = Math.floor(Math.random() * dimensions), // our current row - start at a random spot\n      currentColumn = Math.floor(Math.random() * dimensions), // our current column - start at a random spot\n      directions = [[-1, 0], [1, 0], [0, -1], [0, 1]], // array to get a random direction from (left,right,up,down)\n      lastDirection = [], // save the last direction we went\n      randomDirection; // next turn/direction - holds a value from directions\n\n    // lets create some tunnels - while maxTunnels, dimentions, and maxLength  is greater than 0.\n    while (maxTunnels && dimensions && maxLength) {\n\n      // lets get a random direction - until it is a perpendicular to our lastDirection\n      // if the last direction = left or right,\n      // then our new direction has to be up or down,\n      // and vice versa\n      do {\n         randomDirection = directions[Math.floor(Math.random() * directions.length)];\n      } while ((randomDirection[0] === -lastDirection[0] && randomDirection[1] === -lastDirection[1]) || (randomDirection[0] === lastDirection[0] && randomDirection[1] === lastDirection[1]));\n\n      var randomLength = Math.ceil(Math.random() * maxLength), //length the next tunnel will be (max of maxLength)\n        tunnelLength = 0; //current length of tunnel being created\n\n\t\t// lets loop until our tunnel is long enough or until we hit an edge\n      while (tunnelLength < randomLength) {\n\n        //break the loop if it is going out of the map\n        if (((currentRow === 0) && (randomDirection[0] === -1)) ||\n            ((currentColumn === 0) && (randomDirection[1] === -1)) ||\n            ((currentRow === dimensions - 1) && (randomDirection[0] === 1)) ||\n            ((currentColumn === dimensions - 1) && (randomDirection[1] === 1))) {\n          break;\n        } else {\n          map[currentRow][currentColumn] = 0; //set the value of the index in map to 0 (a tunnel, making it one longer)\n          currentRow += randomDirection[0]; //add the value from randomDirection to row and col (-1, 0, or 1) to update our location\n          currentColumn += randomDirection[1];\n          tunnelLength++; //the tunnel is now one longer, so lets increment that variable\n        }\n      }\n\n      if (tunnelLength) { // update our variables unless our last loop broke before we made any part of a tunnel\n        lastDirection = randomDirection; //set lastDirection, so we can remember what way we went\n        maxTunnels--; // we created a whole tunnel so lets decrement how many we have left to create\n      }\n    }\n    return map; // all our tunnels have been created and our map is complete, so lets return it to our render()\n  };\n\n  onClick(e) {\n    this.forceUpdate()\n  }\n\n  render() {\n    let grid = this.createMap();\n    return (\n      <div >\n        <div className=\"form-group row text-center\">\n          <div className=\"inline\">\n            <label>dimensions</label>\n            <input className=\"form-control\" name=\"dimensions\" type=\"text\" maxLength=\"2\" value={this.state.dimensions} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>maxTunnels</label>\n            <input className=\"form-control\" name=\"maxTunnels\" type=\"text\" maxLength=\"3\" value={this.state.maxTunnels} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>maxLength</label>\n            <input className=\"form-control\" name=\"maxLength\" type=\"text\" maxLength=\"3\" value={this.state.maxLength} onChange={this.onChange}/>\n          </div>\n        </div>\n        <table className=\"grid\" onClick={this.onClick}>\n          <thead>\n            {grid.map((obj, row) => <tr key={row}>{obj.map((obj2, col) =>< td className = {\n                obj2 === 1\n                  ? 'wall'\n                  : 'tunnel'\n              }\n              key = {\n                col\n              } > </td>)}</tr>)}\n          </thead>\n        </table>\n      </div>\n    );\n  }\n}\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}